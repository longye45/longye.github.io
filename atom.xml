<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ly随笔</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://longye45.github.io/"/>
  <updated>2018-03-22T03:23:15.153Z</updated>
  <id>https://longye45.github.io/</id>
  
  <author>
    <name>longye45</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>国密算法SM4的Java与JavaScript实现</title>
    <link href="https://longye45.github.io/2017/12/06/SM4%E7%9A%84%E5%8A%A0%E5%AF%86%E5%AE%9E%E7%8E%B0/"/>
    <id>https://longye45.github.io/2017/12/06/SM4的加密实现/</id>
    <published>2017-12-06T08:01:05.016Z</published>
    <updated>2018-03-22T03:23:15.153Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SM4加密的实现"><a href="#SM4加密的实现" class="headerlink" title="SM4加密的实现"></a><a href="https://github.com/longye45/encrpt" target="_blank" rel="external">SM4加密的实现</a></h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><em>最近项目中需要对数据进行加密处理，由于项目的特殊性要求，加密统一采用国密算法进行加密。网上对国密算法的资料有限，且没有找到对应的JavaScript加密代码，无奈之下只得自己实现。加密的算法文档在<a href="http://www.oscca.gov.cn/sca/index.shtml" target="_blank" rel="external">国家密码管理局</a>官网上可以查找到，此次的算法实现仅限于SM3与SM4的代码实现，SM2由于项目未做特殊要求因此还未来得及实现。</em></p><h2 id="SM4密码杂凑算法简介"><a href="#SM4密码杂凑算法简介" class="headerlink" title="SM4密码杂凑算法简介"></a>SM4密码杂凑算法简介</h2><blockquote><p>SM4算法是一种对称分组加密算法。该算法的分组长度为 128 比特，密钥长度为 128 比特。加密算法与密钥扩展算法都采用 32 轮非线性迭代结构。解密算法与加密算法的结构相同，只是轮询密钥的使用顺序相反，解密轮密钥是加密轮密钥的逆序。</p></blockquote><h3 id="SM4算法加密过程"><a href="#SM4算法加密过程" class="headerlink" title="SM4算法加密过程"></a>SM4算法加密过程</h3><ol><li><p>根据加密密钥生成轮询密钥<br>根据密钥的不同，按照一定规律生成32个字（每个字四个字节）的轮询密钥，用于之后数据的加密；</p></li><li><p>将分组后的数据用轮询秘钥进行加密</p><p>加密的过程主要是用T方法和L方法，T方法转换过程中会用SBOX做一次非线性置换，经过这两个方法进行加密。</p></li></ol><h3 id="SM4算法的解密过程"><a href="#SM4算法的解密过程" class="headerlink" title="SM4算法的解密过程"></a>SM4算法的解密过程</h3><ol><li><p>根据加密密钥生成轮询密钥<br>根据密钥的不同，按照一定规律生成32个字（每个字四个字节）的轮询密钥，用于之后数据的加密；</p></li><li><p>将分组后的数据逆向用轮询秘钥进行加密<br>解密的过程主要是用T方法和L方法，T方法转换过程中会用SBOX做一次非线性置换，经过这两个方法进行加密。</p></li></ol><h2 id="SM4代码实现过程"><a href="#SM4代码实现过程" class="headerlink" title="SM4代码实现过程"></a>SM4代码实现过程</h2><h3 id="java中的SM4实现"><a href="#java中的SM4实现" class="headerlink" title="java中的SM4实现"></a>java中的SM4实现</h3><ul><li>代码中<strong>encrpt（）</strong> 方法是供调用的Java的方法，方法的返回值是加密完成的数组，本方法有一个传入整型数据的重载方法，表示SM4加密次数；</li></ul><ul><li><strong>keyExtend()</strong>方法为扩展秘钥的方法；</li></ul><ul><li><strong>generateKey（）</strong>方法为未指定密钥时自动生成随机密钥的方法，不需要再使用时调用，程序会在初始化时查找密钥，若未指定自动生成密钥；</li></ul><ul><li><strong>decrpt（）</strong>方法为解密方法，同样提供传入整型的重写方法，用来解密经SM4加密多次后的数据，注意使用本方法时必须指定密钥（新建SM4对象时），或者直接在加密的对象中使用。</li><li><strong>getKeyStr()</strong>方法用来获取加解密的密钥十六进制字符串格式</li></ul><p>其他方法均为以上方法的子方法，由于设计较为底层的算法故不加赘述，具体请参照官方算法说明文档。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">     * 加密</span></div><div class="line"><span class="comment">     * </span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] encrpt() &#123;</div><div class="line">        <span class="keyword">this</span>.bytes = addBytes(<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">16</span> - (<span class="keyword">this</span>.bytes.length % <span class="number">16</span> == <span class="number">0</span> ? <span class="number">16</span> : <span class="keyword">this</span>.bytes.length % <span class="number">16</span>)]);</div><div class="line">        keyExtend();<span class="comment">// 生成轮询密钥</span></div><div class="line">        <span class="keyword">int</span> nowPo = <span class="number">0</span>;<span class="comment">// 当前字开始位置</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.bytes.length / BLOCK; i++, nowPo += BLOCK) &#123;<span class="comment">// 分组</span></div><div class="line">            <span class="keyword">int</span>[] rows = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span> + <span class="number">32</span>];</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</div><div class="line">                rows[j] = byteArrayToInt(<span class="keyword">this</span>.bytes, nowPo + j * <span class="number">4</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">32</span>; k++) &#123;</div><div class="line">                rows[k + <span class="number">4</span>] = rows[k] ^ TMethod(rows[k + <span class="number">1</span>] ^ rows[k + <span class="number">2</span>] ^ rows[k + <span class="number">3</span>] ^ <span class="keyword">this</span>.rks[k]);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</div><div class="line">                System.arraycopy(intToByteArray(rows[<span class="number">35</span> - k]), <span class="number">0</span>, <span class="keyword">this</span>.bytes, nowPo + <span class="number">4</span> * k, <span class="number">4</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">/*</span></div><div class="line"><span class="comment">         * 将未分组byte移到结果</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        System.arraycopy(<span class="keyword">this</span>.bytes, <span class="keyword">this</span>.bytes.length / BLOCK * BLOCK, <span class="keyword">this</span>.bytes, <span class="keyword">this</span>.bytes.length / BLOCK * BLOCK, <span class="keyword">this</span>.bytes.length % BLOCK);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.bytes;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">    * 密钥扩展算法</span></div><div class="line"><span class="comment">    */</span></div><div class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">keyExtend</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">int</span>[] K = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">36</span>];</div><div class="line">       <span class="keyword">int</span>[] keys = &#123; <span class="keyword">this</span>.key[<span class="number">0</span>] ^ <span class="keyword">this</span>.FKS[<span class="number">0</span>], <span class="keyword">this</span>.key[<span class="number">1</span>] ^ <span class="keyword">this</span>.FKS[<span class="number">1</span>], <span class="keyword">this</span>.key[<span class="number">2</span>] ^ <span class="keyword">this</span>.FKS[<span class="number">2</span>], <span class="keyword">this</span>.key[<span class="number">3</span>] ^ <span class="keyword">this</span>.FKS[<span class="number">3</span>] &#125;;</div><div class="line">       System.arraycopy(keys, <span class="number">0</span>, K, <span class="number">0</span>, keys.length);</div><div class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</div><div class="line">           <span class="keyword">this</span>.rks[i] = K[i] ^ TPMethod(K[i + <span class="number">1</span>] ^ K[i + <span class="number">2</span>] ^ K[i + <span class="number">3</span>] ^ CK[i]);</div><div class="line">           K[i + <span class="number">4</span>] = <span class="keyword">this</span>.rks[i];</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">    * 随机生成密钥</span></div><div class="line"><span class="comment">    */</span></div><div class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">generateKey</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">byte</span>[] var2 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">32</span>];</div><div class="line">       <span class="keyword">this</span>.random.nextBytes(var2);</div><div class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; KEYLENGTH; i++) &#123;</div><div class="line">           <span class="keyword">this</span>.key[i] = byteArrayToInt(var2, <span class="number">4</span> * i);</div><div class="line">       &#125;</div><div class="line">       isKeyInit = <span class="keyword">true</span>;</div><div class="line">   &#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">     * 加密</span></div><div class="line"><span class="comment">     * </span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] encrpt() &#123;</div><div class="line">        <span class="keyword">this</span>.bytes = addBytes(<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">16</span> - (<span class="keyword">this</span>.bytes.length % <span class="number">16</span> == <span class="number">0</span> ? <span class="number">16</span> : <span class="keyword">this</span>.bytes.length % <span class="number">16</span>)]);</div><div class="line">        keyExtend();<span class="comment">// 生成轮询密钥</span></div><div class="line">        <span class="keyword">int</span> nowPo = <span class="number">0</span>;<span class="comment">// 当前字开始位置</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.bytes.length / BLOCK; i++, nowPo += BLOCK) &#123;<span class="comment">// 分组</span></div><div class="line">            <span class="keyword">int</span>[] rows = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span> + <span class="number">32</span>];</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</div><div class="line">                rows[j] = byteArrayToInt(<span class="keyword">this</span>.bytes, nowPo + j * <span class="number">4</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">32</span>; k++) &#123;</div><div class="line">                rows[k + <span class="number">4</span>] = rows[k] ^ TMethod(rows[k + <span class="number">1</span>] ^ rows[k + <span class="number">2</span>] ^ rows[k + <span class="number">3</span>] ^ <span class="keyword">this</span>.rks[k]);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</div><div class="line">                System.arraycopy(intToByteArray(rows[<span class="number">35</span> - k]), <span class="number">0</span>, <span class="keyword">this</span>.bytes, nowPo + <span class="number">4</span> * k, <span class="number">4</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">/*</span></div><div class="line"><span class="comment">         * 将未分组byte移到结果</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        System.arraycopy(<span class="keyword">this</span>.bytes, <span class="keyword">this</span>.bytes.length / BLOCK * BLOCK, <span class="keyword">this</span>.bytes, <span class="keyword">this</span>.bytes.length / BLOCK * BLOCK, <span class="keyword">this</span>.bytes.length % BLOCK);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.bytes;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">     * 随机生成密钥</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">generateKey</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">byte</span>[] var2 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">32</span>];</div><div class="line">        <span class="keyword">this</span>.random.nextBytes(var2);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; KEYLENGTH; i++) &#123;</div><div class="line">            <span class="keyword">this</span>.key[i] = byteArrayToInt(var2, <span class="number">4</span> * i);</div><div class="line">        &#125;</div><div class="line">        isKeyInit = <span class="keyword">true</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h3 id="JavaScript中的SM4实现"><a href="#JavaScript中的SM4实现" class="headerlink" title="JavaScript中的SM4实现"></a>JavaScript中的SM4实现</h3><p>由于Java代码的完成时间较早，JavaScript的实现代码是从Java代码移植过来的，方法命名大同小异，因此不加赘述。代码版面较长，本文就不贴了，请移步github查看。</p><h2 id="SM3加密的使用方法"><a href="#SM3加密的使用方法" class="headerlink" title="SM3加密的使用方法"></a>SM3加密的使用方法</h2><h3 id="SM4加密的Java使用"><a href="#SM4加密的Java使用" class="headerlink" title="SM4加密的Java使用"></a>SM4加密的Java使用</h3><p>最近事务繁多无法抽身用设计模式对本算法进行优化，为了稳定运行只能牺牲性能采用实例化后调用的方式进行。由于底层计算都是位运算实际使用情况尚可，以下是在Java中的使用方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</div><div class="line">        SM4Encrp sm4 = <span class="keyword">new</span> SM4Encrp(<span class="keyword">new</span> <span class="keyword">byte</span>[]&#123;<span class="number">0x43</span>,<span class="number">0x35</span>&#125;);<span class="comment">//传入要加密的数据，使用内部生成随机密钥的方式进行，也可使用提供的其他构造方法</span></div><div class="line">        <span class="keyword">byte</span> bt = sm4.encrpt();<span class="comment">//加密</span></div><div class="line">        SM4Encrp sm4de = <span class="keyword">new</span> SM4Encrp(bt,sm4.getKeyStr);<span class="comment">//传入需要解密的数据和加密用的密钥</span></div><div class="line">        <span class="keyword">byte</span> btSource = sm4de.decrpt();<span class="comment">//解密获取原数据</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure><h3 id="SM4加密的JavaScript使用"><a href="#SM4加密的JavaScript使用" class="headerlink" title="SM4加密的JavaScript使用"></a>SM4加密的JavaScript使用</h3><p>由于前台多是处理字符串和二进制数据，故统一采用传递二进制的方式进行杂凑计算。如果有求字符串杂凑值的必要可以调用以下方法转换为二进制byte数组进行使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 字符串转byte数组</span></div><div class="line"><span class="comment"> * </span></div><div class="line"><span class="comment"> * @param &#123;*字符串&#125;</span></div><div class="line"><span class="comment"> *            str</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">stringToByte</span>(<span class="params">str</span>)</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">var</span> bytes = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">    <span class="keyword">var</span> len, c;</div><div class="line">    len = str.length;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++)</div><div class="line">    &#123;</div><div class="line">        c = str.charCodeAt(i);</div><div class="line">        <span class="keyword">if</span> (c &gt;= <span class="number">0x010000</span> &amp;&amp; c &lt;= <span class="number">0x10FFFF</span>)</div><div class="line">        &#123;</div><div class="line">            bytes.push(((c &gt;&gt; <span class="number">18</span>) &amp; <span class="number">0x07</span>) | <span class="number">0xF0</span>);</div><div class="line">            bytes.push(((c &gt;&gt; <span class="number">12</span>) &amp; <span class="number">0x3F</span>) | <span class="number">0x80</span>);</div><div class="line">            bytes.push(((c &gt;&gt; <span class="number">6</span>) &amp; <span class="number">0x3F</span>) | <span class="number">0x80</span>);</div><div class="line">            bytes.push((c &amp; <span class="number">0x3F</span>) | <span class="number">0x80</span>);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c &gt;= <span class="number">0x000800</span> &amp;&amp; c &lt;= <span class="number">0x00FFFF</span>)</div><div class="line">        &#123;</div><div class="line">            bytes.push(((c &gt;&gt; <span class="number">12</span>) &amp; <span class="number">0x0F</span>) | <span class="number">0xE0</span>);</div><div class="line">            bytes.push(((c &gt;&gt; <span class="number">6</span>) &amp; <span class="number">0x3F</span>) | <span class="number">0x80</span>);</div><div class="line">            bytes.push((c &amp; <span class="number">0x3F</span>) | <span class="number">0x80</span>);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c &gt;= <span class="number">0x000080</span> &amp;&amp; c &lt;= <span class="number">0x0007FF</span>)</div><div class="line">        &#123;</div><div class="line">            bytes.push(((c &gt;&gt; <span class="number">6</span>) &amp; <span class="number">0x1F</span>) | <span class="number">0xC0</span>);</div><div class="line">            bytes.push((c &amp; <span class="number">0x3F</span>) | <span class="number">0x80</span>);</div><div class="line">        &#125; <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            bytes.push(c &amp; <span class="number">0xFF</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> bytes;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>使用方式如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> test = <span class="keyword">new</span> SM4Encrpt(&#123;   <span class="comment">//实例化解密类</span></div><div class="line">       （key/keyStr）:***,<span class="comment">//指定的数组加密/解密密钥数组/密钥字符串，此参数若是加密可以省略，加密密钥由本类自动生成；若是解密必须指定该密钥</span></div><div class="line">       bytes/enStr:*** <span class="comment">//需要加密/解密的二进制/字符串</span></div><div class="line">  &#125;);</div><div class="line">  test.encrpt();<span class="comment">//此为加密方法</span></div><div class="line">  test.encrpt(<span class="number">100</span>);<span class="comment">//此为加密100次</span></div><div class="line">  test.decrpt();<span class="comment">//此为解密方法</span></div><div class="line">  test.decrpt(<span class="number">100</span>);<span class="comment">//此为解密100次</span></div></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><blockquote><p>热衷造轮子，</p><p>方便造车人。</p></blockquote><p>愿别人的收获中也有属于自己的耕耘。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SM4加密的实现&quot;&gt;&lt;a href=&quot;#SM4加密的实现&quot; class=&quot;headerlink&quot; title=&quot;SM4加密的实现&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/longye45/encrpt&quot; target=&quot;_blank&quot; r
      
    
    </summary>
    
      <category term="算法编程" scheme="https://longye45.github.io/categories/%E7%AE%97%E6%B3%95%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="加密" scheme="https://longye45.github.io/tags/%E5%8A%A0%E5%AF%86/"/>
    
      <category term="Java" scheme="https://longye45.github.io/tags/Java/"/>
    
      <category term="JavaScript" scheme="https://longye45.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>国密算法SM3的Java与JavaScript实现</title>
    <link href="https://longye45.github.io/2017/12/04/%E5%9B%BD%E5%AF%86%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E7%9A%84Java%E4%B8%8EJavaScript%E5%AE%9E%E7%8E%B0/"/>
    <id>https://longye45.github.io/2017/12/04/国密加密算法的Java与JavaScript实现/</id>
    <published>2017-12-04T01:29:37.428Z</published>
    <updated>2017-12-06T08:12:42.185Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SM3加密的实现"><a href="#SM3加密的实现" class="headerlink" title="SM3加密的实现"></a><a href="https://github.com/longye45/encrpt" target="_blank" rel="external">SM3加密的实现</a></h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><em>最近项目中需要对数据进行加密处理，由于项目的特殊性要求，加密统一采用国密算法进行加密。网上对国密算法的资料有限，且没有找到对应的JavaScript加密代码，无奈之下只得自己实现。加密的算法文档在<a href="http://www.oscca.gov.cn/sca/index.shtml" target="_blank" rel="external">国家密码管理局</a>官网上可以查找到，此次的算法实现仅限于SM3与SM4的代码实现，SM2由于项目未做特殊要求因此还未来得及实现。</em></p><h2 id="SM3密码杂凑算法简介"><a href="#SM3密码杂凑算法简介" class="headerlink" title="SM3密码杂凑算法简介"></a>SM3密码杂凑算法简介</h2><blockquote><p>SM3算法是一种验证签名类算法，类似于<a href="https://baike.baidu.com/item/MD5/212708?fr=aladdin" target="_blank" rel="external">MD5</a>或<a href="https://baike.baidu.com/item/SHA1" target="_blank" rel="external">SHA1</a>等算法,适用于商用密码应用中的数字签名和验证、消息认证码的生成与验证以及随机数的生成， 可满足多种密码应用的安全需求。</p></blockquote><h3 id="SM3杂凑过程"><a href="#SM3杂凑过程" class="headerlink" title="SM3杂凑过程"></a>SM3杂凑过程</h3><p><strong>1.数据填充</strong><br>将原数据二进制进行填充，填充后的消息m′ 的比特长度为512的倍数。<br><strong>2.消息扩展</strong><br>将填充后的消息m′按512比特进行分组,将每组消息分组B(i)按一定方法扩展生成132个字，每个字为四个字节。<br><strong>3.迭代压缩</strong><br>按照一定规律进行64次迭代压缩，压缩后的值存入8个字节寄存器里面。<br><strong>4得到杂凑值</strong><br>最终计算出256位杂凑值</p><h2 id="SM3代码实现过程"><a href="#SM3代码实现过程" class="headerlink" title="SM3代码实现过程"></a>SM3代码实现过程</h2><h3 id="java中的SM3实现"><a href="#java中的SM3实现" class="headerlink" title="java中的SM3实现"></a>java中的SM3实现</h3><p>代码中 <strong>getEncrpResult（）</strong> 方法是获取杂凑值的方法，方法的返回值是一个整型数组，大部分的杂凑值为了便于查看与比较，通常采用十六进制的字符串进行表示，本类也同样提供实现方法，实现方法是 <strong>getStringEncrpResult（）</strong> 。其他方法均为以上方法的子方法，由于设计较为底层的算法故不加赘述，具体请参照官方算法说明文档。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] getEncrpResult()</div><div class="line">    &#123;</div><div class="line">        fillBinDatas();<span class="comment">// 填充</span></div><div class="line">        ExtendedPacket();<span class="comment">// 扩展</span></div><div class="line">        IterationMethod();<span class="comment">// 迭代压缩</span></div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getStringEncrpResult</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span>[] rs = getEncrpResult();</div><div class="line">    String string = <span class="string">""</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rs.length; i++)</div><div class="line">    &#123;</div><div class="line">        string += Integer.toHexString(rs[i]) + <span class="string">" "</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> string;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="JavaScript中的SM3实现"><a href="#JavaScript中的SM3实现" class="headerlink" title="JavaScript中的SM3实现"></a>JavaScript中的SM3实现</h3><p>由于Java代码的完成时间较早，JavaScript的实现代码是从Java代码移植过来的，方法命名大同小异，因此不加赘述。加密方法为 <strong>getEncrpResult（）</strong> 和 <strong>getStringEncrpResult（）</strong> 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">me.getEncrpResult = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        me.init();</div><div class="line">        fillBinDatas();<span class="comment">// 填充</span></div><div class="line">        ExtendedPacket();<span class="comment">// 扩展</span></div><div class="line">        IterationMethod();<span class="comment">// 迭代压缩</span></div><div class="line">        <span class="keyword">return</span> me.result;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">me.getStringEncrpResult = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">var</span> rs = me.getEncrpResult();</div><div class="line">        <span class="keyword">var</span> string = <span class="string">""</span>;</div><div class="line">        <span class="keyword">var</span> res = <span class="keyword">new</span> <span class="built_in">Uint32Array</span>(me.result.length);</div><div class="line">        copyArray(rs, <span class="number">0</span>, res, <span class="number">0</span>, rs.length);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; rs.length; i++)</div><div class="line">        &#123;</div><div class="line">            string += res[i].toString(<span class="number">16</span>) + <span class="string">" "</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> string;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h2 id="SM3加密的使用方法"><a href="#SM3加密的使用方法" class="headerlink" title="SM3加密的使用方法"></a>SM3加密的使用方法</h2><h3 id="SM3加密的Java使用"><a href="#SM3加密的Java使用" class="headerlink" title="SM3加密的Java使用"></a>SM3加密的Java使用</h3><p>本人水平有限无法熟练处理线程安全问题，为了稳定运行只能牺牲性能采用实例化后调用的方式进行。由于底层计算都是位运算实际使用情况尚可，以下是在Java中的使用方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SM3Encrp sm3 = <span class="keyword">new</span> SM3Encrp(<span class="keyword">new</span> <span class="keyword">byte</span>[] &#123; <span class="number">0x61</span>, <span class="number">0x62</span>, <span class="number">0x63</span>, (<span class="keyword">byte</span>) <span class="number">0xff</span> &#125;);</div><div class="line">String sm3Code = s.getStringEncrpResult();</div></pre></td></tr></table></figure><p>除了以上构造方法，还提供输入流和字符串的构造方法重载，基本上满足了项目中的使用。</p><h3 id="SM3加密的JavaScript使用"><a href="#SM3加密的JavaScript使用" class="headerlink" title="SM3加密的JavaScript使用"></a>SM3加密的JavaScript使用</h3><p>由于前台多是处理字符串和二进制数据，故统一采用传递二进制的方式进行杂凑计算。如果有求字符串杂凑值的必要可以调用以下方法转换为二进制byte数组进行使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 字符串转byte数组</span></div><div class="line"><span class="comment"> * </span></div><div class="line"><span class="comment"> * @param &#123;*字符串&#125;</span></div><div class="line"><span class="comment"> *            str</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">stringToByte</span>(<span class="params">str</span>)</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">var</span> bytes = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">    <span class="keyword">var</span> len, c;</div><div class="line">    len = str.length;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++)</div><div class="line">    &#123;</div><div class="line">        c = str.charCodeAt(i);</div><div class="line">        <span class="keyword">if</span> (c &gt;= <span class="number">0x010000</span> &amp;&amp; c &lt;= <span class="number">0x10FFFF</span>)</div><div class="line">        &#123;</div><div class="line">            bytes.push(((c &gt;&gt; <span class="number">18</span>) &amp; <span class="number">0x07</span>) | <span class="number">0xF0</span>);</div><div class="line">            bytes.push(((c &gt;&gt; <span class="number">12</span>) &amp; <span class="number">0x3F</span>) | <span class="number">0x80</span>);</div><div class="line">            bytes.push(((c &gt;&gt; <span class="number">6</span>) &amp; <span class="number">0x3F</span>) | <span class="number">0x80</span>);</div><div class="line">            bytes.push((c &amp; <span class="number">0x3F</span>) | <span class="number">0x80</span>);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c &gt;= <span class="number">0x000800</span> &amp;&amp; c &lt;= <span class="number">0x00FFFF</span>)</div><div class="line">        &#123;</div><div class="line">            bytes.push(((c &gt;&gt; <span class="number">12</span>) &amp; <span class="number">0x0F</span>) | <span class="number">0xE0</span>);</div><div class="line">            bytes.push(((c &gt;&gt; <span class="number">6</span>) &amp; <span class="number">0x3F</span>) | <span class="number">0x80</span>);</div><div class="line">            bytes.push((c &amp; <span class="number">0x3F</span>) | <span class="number">0x80</span>);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c &gt;= <span class="number">0x000080</span> &amp;&amp; c &lt;= <span class="number">0x0007FF</span>)</div><div class="line">        &#123;</div><div class="line">            bytes.push(((c &gt;&gt; <span class="number">6</span>) &amp; <span class="number">0x1F</span>) | <span class="number">0xC0</span>);</div><div class="line">            bytes.push((c &amp; <span class="number">0x3F</span>) | <span class="number">0x80</span>);</div><div class="line">        &#125; <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            bytes.push(c &amp; <span class="number">0xFF</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> bytes;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>完整的使用过程如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> sm = <span class="keyword">new</span> SM3Entrpt([<span class="number">0x61</span>, <span class="number">0x62</span>, <span class="number">0x63</span>, <span class="number">0x64</span>, <span class="number">0x61</span>, <span class="number">0x62</span>, <span class="number">0x63</span>, <span class="number">0x64</span>, <span class="number">0x61</span>,</div><div class="line"><span class="number">0x62</span>, <span class="number">0x63</span>, <span class="number">0x64</span>, <span class="number">0x61</span>, <span class="number">0x62</span>, <span class="number">0x63</span>, <span class="number">0x64</span>,</div><div class="line"> <span class="number">0x61</span>, <span class="number">0x62</span>, <span class="number">0x63</span>, <span class="number">0x64</span>, <span class="number">0x61</span>, <span class="number">0x62</span>, <span class="number">0x63</span>, <span class="number">0x64</span>, <span class="number">0x61</span>, <span class="number">0x62</span>, <span class="number">0x63</span>, <span class="number">0x64</span>, <span class="number">0x61</span>,</div><div class="line"> <span class="number">0x62</span>, <span class="number">0x63</span>, <span class="number">0x64</span>, <span class="number">0x61</span>, <span class="number">0x62</span>, <span class="number">0x63</span>, <span class="number">0x64</span>,</div><div class="line"> <span class="number">0x61</span>, <span class="number">0x62</span>, <span class="number">0x63</span>, <span class="number">0x64</span>, <span class="number">0x61</span>, <span class="number">0x62</span>, <span class="number">0x63</span>, <span class="number">0x64</span>, <span class="number">0x61</span>, <span class="number">0x62</span>, <span class="number">0x63</span>, <span class="number">0x64</span>, <span class="number">0x61</span>,</div><div class="line"> <span class="number">0x62</span>, <span class="number">0x63</span>, <span class="number">0x64</span>, <span class="number">0x61</span>, <span class="number">0x62</span>, <span class="number">0x63</span>, <span class="number">0x64</span>,</div><div class="line"> <span class="number">0x61</span>, <span class="number">0x62</span>, <span class="number">0x63</span>, <span class="number">0x64</span>, <span class="number">0x61</span>, <span class="number">0x62</span>, <span class="number">0x63</span>, <span class="number">0x64</span>]);</div><div class="line"> <span class="keyword">var</span> result = sm.getStringEncrpResult();</div></pre></td></tr></table></figure><p>如果要求字符串的杂凑值，使用方法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">"测试代码"</span>;</div><div class="line"><span class="keyword">var</span> sm = <span class="keyword">new</span> SM3Entrpt(stringToByte(str));</div><div class="line"><span class="keyword">var</span> result = sm.getStringEncrpResult();</div></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><blockquote><p>九层之台起于累土，<br>千里之行始于足下。</p></blockquote><p>愿别人的收获中也有属于自己的耕耘。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SM3加密的实现&quot;&gt;&lt;a href=&quot;#SM3加密的实现&quot; class=&quot;headerlink&quot; title=&quot;SM3加密的实现&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/longye45/encrpt&quot; target=&quot;_blank&quot; r
      
    
    </summary>
    
      <category term="算法编程" scheme="https://longye45.github.io/categories/%E7%AE%97%E6%B3%95%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="加密" scheme="https://longye45.github.io/tags/%E5%8A%A0%E5%AF%86/"/>
    
      <category term="Java" scheme="https://longye45.github.io/tags/Java/"/>
    
      <category term="JavaScript" scheme="https://longye45.github.io/tags/JavaScript/"/>
    
  </entry>
  
</feed>
